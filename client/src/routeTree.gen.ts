/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PathlessImport } from './routes/_pathless'
import { Route as AuthImport } from './routes/_auth'
import { Route as PostsRouteImport } from './routes/posts/route'
import { Route as IndexImport } from './routes/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as LoginIndexImport } from './routes/Login/index'
import { Route as ProductsProductIdImport } from './routes/products/$productId'
import { Route as PostsPostImport } from './routes/posts/post'
import { Route as PathlessNestedpathlessImport } from './routes/_pathless/_nestedpathless'
import { Route as AuthCheckoutIndexImport } from './routes/_auth/checkout/index'
import { Route as PathlessNestedpathlessRouteBImport } from './routes/_pathless/_nestedpathless/route-b'
import { Route as PathlessNestedpathlessRouteAImport } from './routes/_pathless/_nestedpathless/route-a'

// Create/Update Routes

const PathlessRoute = PathlessImport.update({
  id: '/_pathless',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const PostsRouteRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/Login/',
  path: '/Login/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsProductIdRoute = ProductsProductIdImport.update({
  id: '/products/$productId',
  path: '/products/$productId',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostRoute = PostsPostImport.update({
  id: '/post',
  path: '/post',
  getParentRoute: () => PostsRouteRoute,
} as any)

const PathlessNestedpathlessRoute = PathlessNestedpathlessImport.update({
  id: '/_nestedpathless',
  getParentRoute: () => PathlessRoute,
} as any)

const AuthCheckoutIndexRoute = AuthCheckoutIndexImport.update({
  id: '/checkout/',
  path: '/checkout/',
  getParentRoute: () => AuthRoute,
} as any)

const PathlessNestedpathlessRouteBRoute =
  PathlessNestedpathlessRouteBImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessNestedpathlessRoute,
  } as any)

const PathlessNestedpathlessRouteARoute =
  PathlessNestedpathlessRouteAImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessNestedpathlessRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_pathless': {
      id: '/_pathless'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessImport
      parentRoute: typeof rootRoute
    }
    '/_pathless/_nestedpathless': {
      id: '/_pathless/_nestedpathless'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessNestedpathlessImport
      parentRoute: typeof PathlessImport
    }
    '/posts/post': {
      id: '/posts/post'
      path: '/post'
      fullPath: '/posts/post'
      preLoaderRoute: typeof PostsPostImport
      parentRoute: typeof PostsRouteImport
    }
    '/products/$productId': {
      id: '/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductsProductIdImport
      parentRoute: typeof rootRoute
    }
    '/Login/': {
      id: '/Login/'
      path: '/Login'
      fullPath: '/Login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/_pathless/_nestedpathless/route-a': {
      id: '/_pathless/_nestedpathless/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessNestedpathlessRouteAImport
      parentRoute: typeof PathlessNestedpathlessImport
    }
    '/_pathless/_nestedpathless/route-b': {
      id: '/_pathless/_nestedpathless/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessNestedpathlessRouteBImport
      parentRoute: typeof PathlessNestedpathlessImport
    }
    '/_auth/checkout/': {
      id: '/_auth/checkout/'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof AuthCheckoutIndexImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface PostsRouteRouteChildren {
  PostsPostRoute: typeof PostsPostRoute
}

const PostsRouteRouteChildren: PostsRouteRouteChildren = {
  PostsPostRoute: PostsPostRoute,
}

const PostsRouteRouteWithChildren = PostsRouteRoute._addFileChildren(
  PostsRouteRouteChildren,
)

interface AuthRouteChildren {
  AuthCheckoutIndexRoute: typeof AuthCheckoutIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthCheckoutIndexRoute: AuthCheckoutIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PathlessNestedpathlessRouteChildren {
  PathlessNestedpathlessRouteARoute: typeof PathlessNestedpathlessRouteARoute
  PathlessNestedpathlessRouteBRoute: typeof PathlessNestedpathlessRouteBRoute
}

const PathlessNestedpathlessRouteChildren: PathlessNestedpathlessRouteChildren =
  {
    PathlessNestedpathlessRouteARoute: PathlessNestedpathlessRouteARoute,
    PathlessNestedpathlessRouteBRoute: PathlessNestedpathlessRouteBRoute,
  }

const PathlessNestedpathlessRouteWithChildren =
  PathlessNestedpathlessRoute._addFileChildren(
    PathlessNestedpathlessRouteChildren,
  )

interface PathlessRouteChildren {
  PathlessNestedpathlessRoute: typeof PathlessNestedpathlessRouteWithChildren
}

const PathlessRouteChildren: PathlessRouteChildren = {
  PathlessNestedpathlessRoute: PathlessNestedpathlessRouteWithChildren,
}

const PathlessRouteWithChildren = PathlessRoute._addFileChildren(
  PathlessRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '': typeof PathlessNestedpathlessRouteWithChildren
  '/posts/post': typeof PostsPostRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/Login': typeof LoginIndexRoute
  '/products': typeof ProductsIndexRoute
  '/route-a': typeof PathlessNestedpathlessRouteARoute
  '/route-b': typeof PathlessNestedpathlessRouteBRoute
  '/checkout': typeof AuthCheckoutIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '': typeof PathlessNestedpathlessRouteWithChildren
  '/posts/post': typeof PostsPostRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/Login': typeof LoginIndexRoute
  '/products': typeof ProductsIndexRoute
  '/route-a': typeof PathlessNestedpathlessRouteARoute
  '/route-b': typeof PathlessNestedpathlessRouteBRoute
  '/checkout': typeof AuthCheckoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_pathless': typeof PathlessRouteWithChildren
  '/_pathless/_nestedpathless': typeof PathlessNestedpathlessRouteWithChildren
  '/posts/post': typeof PostsPostRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/Login/': typeof LoginIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/_pathless/_nestedpathless/route-a': typeof PathlessNestedpathlessRouteARoute
  '/_pathless/_nestedpathless/route-b': typeof PathlessNestedpathlessRouteBRoute
  '/_auth/checkout/': typeof AuthCheckoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/posts'
    | ''
    | '/posts/post'
    | '/products/$productId'
    | '/Login'
    | '/products'
    | '/route-a'
    | '/route-b'
    | '/checkout'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/posts'
    | ''
    | '/posts/post'
    | '/products/$productId'
    | '/Login'
    | '/products'
    | '/route-a'
    | '/route-b'
    | '/checkout'
  id:
    | '__root__'
    | '/'
    | '/posts'
    | '/_auth'
    | '/_pathless'
    | '/_pathless/_nestedpathless'
    | '/posts/post'
    | '/products/$productId'
    | '/Login/'
    | '/products/'
    | '/_pathless/_nestedpathless/route-a'
    | '/_pathless/_nestedpathless/route-b'
    | '/_auth/checkout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostsRouteRoute: typeof PostsRouteRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  PathlessRoute: typeof PathlessRouteWithChildren
  ProductsProductIdRoute: typeof ProductsProductIdRoute
  LoginIndexRoute: typeof LoginIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostsRouteRoute: PostsRouteRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  PathlessRoute: PathlessRouteWithChildren,
  ProductsProductIdRoute: ProductsProductIdRoute,
  LoginIndexRoute: LoginIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/posts",
        "/_auth",
        "/_pathless",
        "/products/$productId",
        "/Login/",
        "/products/"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/posts": {
      "filePath": "posts/route.jsx",
      "children": [
        "/posts/post"
      ]
    },
    "/_auth": {
      "filePath": "_auth.jsx",
      "children": [
        "/_auth/checkout/"
      ]
    },
    "/_pathless": {
      "filePath": "_pathless.jsx",
      "children": [
        "/_pathless/_nestedpathless"
      ]
    },
    "/_pathless/_nestedpathless": {
      "filePath": "_pathless/_nestedpathless.jsx",
      "parent": "/_pathless",
      "children": [
        "/_pathless/_nestedpathless/route-a",
        "/_pathless/_nestedpathless/route-b"
      ]
    },
    "/posts/post": {
      "filePath": "posts/post.jsx",
      "parent": "/posts"
    },
    "/products/$productId": {
      "filePath": "products/$productId.jsx"
    },
    "/Login/": {
      "filePath": "Login/index.jsx"
    },
    "/products/": {
      "filePath": "products/index.jsx"
    },
    "/_pathless/_nestedpathless/route-a": {
      "filePath": "_pathless/_nestedpathless/route-a.jsx",
      "parent": "/_pathless/_nestedpathless"
    },
    "/_pathless/_nestedpathless/route-b": {
      "filePath": "_pathless/_nestedpathless/route-b.jsx",
      "parent": "/_pathless/_nestedpathless"
    },
    "/_auth/checkout/": {
      "filePath": "_auth/checkout/index.jsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
